{
  "version": 3,
  "sources": ["../../../app/utils.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils.ts\"\n);\nimport.meta.hot.lastModified = \"1708448308234.2375\";\n}\n// REMIX HMR END\n\nimport { useMatches } from \"@remix-run/react\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport type { User } from \"~/models/user.server\";\r\n\r\nconst DEFAULT_REDIRECT = \"/\";\r\n\r\n/**\r\n * This should be used any time the redirect path is user-provided\r\n * (Like the query string on our login/signup pages). This avoids\r\n * open-redirect vulnerabilities.\r\n * @param {string} to The redirect destination\r\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\r\n */\r\nexport function safeRedirect(\r\n  to: FormDataEntryValue | string | null | undefined,\r\n  defaultRedirect: string = DEFAULT_REDIRECT,\r\n) {\r\n  if (!to || typeof to !== \"string\") {\r\n    return defaultRedirect;\r\n  }\r\n\r\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\r\n    return defaultRedirect;\r\n  }\r\n\r\n  return to;\r\n}\r\n\r\n/**\r\n * This base hook is used in other hooks to quickly search for specific data\r\n * across all loader data using useMatches.\r\n * @param {string} id The route id\r\n * @returns {JSON|undefined} The router data or undefined if not found\r\n */\r\nexport function useMatchesData(\r\n  id: string,\r\n): Record<string, unknown> | undefined {\r\n  const matchingRoutes = useMatches();\r\n  const route = useMemo(\r\n    () => matchingRoutes.find((route) => route.id === id),\r\n    [matchingRoutes, id],\r\n  );\r\n  return route?.data as Record<string, unknown>;\r\n}\r\n\r\nfunction isUser(user: unknown): user is User {\r\n  return (\r\n    user != null &&\r\n    typeof user === \"object\" &&\r\n    \"email\" in user &&\r\n    typeof user.email === \"string\"\r\n  );\r\n}\r\n\r\nexport function useOptionalUser(): User | undefined {\r\n  const data = useMatchesData(\"root\");\r\n  if (!data || !isUser(data.user)) {\r\n    return undefined;\r\n  }\r\n  return data.user;\r\n}\r\n\r\nexport function useUser(): User {\r\n  const maybeUser = useOptionalUser();\r\n  if (!maybeUser) {\r\n    throw new Error(\r\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\",\r\n    );\r\n  }\r\n  return maybeUser;\r\n}\r\n\r\nexport function validateEmail(email: unknown): email is string {\r\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAYA,IAAAA,gBAAwB;AAVxB,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAsCO,SAAS,eACd,IACqC;AACrC,QAAM,iBAAiB,WAAW;AAClC,QAAM,YAAQ;AAAA,IACZ,MAAM,eAAe,KAAK,CAACC,WAAUA,OAAM,OAAO,EAAE;AAAA,IACpD,CAAC,gBAAgB,EAAE;AAAA,EACrB;AACA,SAAO,OAAO;AAChB;AAEA,SAAS,OAAO,MAA6B;AAC3C,SACE,QAAQ,QACR,OAAO,SAAS,YAChB,WAAW,QACX,OAAO,KAAK,UAAU;AAE1B;AAEO,SAAS,kBAAoC;AAClD,QAAM,OAAO,eAAe,MAAM;AAClC,MAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,IAAI,GAAG;AAC/B,WAAO;AAAA,EACT;AACA,SAAO,KAAK;AACd;AAEO,SAAS,UAAgB;AAC9B,QAAM,YAAY,gBAAgB;AAClC,MAAI,CAAC,WAAW;AACd,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;",
  "names": ["import_react", "route"]
}
