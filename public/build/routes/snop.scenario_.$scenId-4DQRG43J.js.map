{
  "version": 3,
  "sources": ["../../../app/routes/snop.scenario_.$scenId.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\snop.scenario_.$scenId.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\snop.scenario_.$scenId.tsx\");\n  import.meta.hot.lastModified = \"1708500023507.2007\";\n}\n// REMIX HMR END\n\nimport React from \"react\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nimport { getScenarioById } from \"~/models/scenario.server\";\nimport SnopForm from \"~/components/SnopForm\";\nimport { cn } from \"~/lib/utils\";\nconst navigation = [{\n  id: 1,\n  name: \"S&OP\",\n  to: \"/snop/optimize\"\n}, {\n  id: 2,\n  name: \"Demand\",\n  to: \"#\"\n}, {\n  id: 3,\n  name: \"Inventory\",\n  to: \"#\"\n}, {\n  id: 4,\n  name: \"Logistics\",\n  to: \"#\"\n}, {\n  id: 5,\n  name: \"Procurement\",\n  to: \"#\"\n}];\nconst bucket = {\n  1: \"January\",\n  2: \"February\",\n  3: \"March\",\n  4: \"April\",\n  5: \"May\",\n  6: \"June\",\n  7: \"July\",\n  8: \"August\",\n  9: \"September\",\n  10: \"October\",\n  11: \"November\",\n  12: \"December\"\n};\nfunction DemoContainer({\n  className,\n  ...props\n}) {\n  return <div className={cn(\"flex items-center justify-center [&>div]:w-full\", className)} {...props} />;\n}\n_c = DemoContainer;\nexport const loader = async ({\n  params\n}) => {\n  console.log(params.scenId);\n  const scenarioData = await getScenarioById(params.scenId);\n  console.log(scenarioData);\n  return json({\n    scenarioData\n  });\n};\n\n// export const action = async ({ request }) => {};\n\nexport default function UpdateScenario() {\n  _s();\n  const [date, setDate] = React.useState(new Date());\n  const {\n    scenarioData\n  } = useLoaderData();\n  return <SnopForm inputData={scenarioData} />;\n}\n_s(UpdateScenario, \"Cb48HX5qptjBWUXJq/a4JUQ58P0=\", false, function () {\n  return [useLoaderData];\n});\n_c2 = UpdateScenario;\nvar _c, _c2;\n$RefreshReg$(_c, \"DemoContainer\");\n$RefreshReg$(_c2, \"UpdateScenario\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAkB;AAElB,kBAAqB;AACrB,sBAAgC;AA0CvB;AAjET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kDAAoD,EAAE;AAAA,EAC/F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyC;AACzC,cAAY,IAAI,eAAe;AACjC;AA4CA,SAAS,cAAc;AAAA,EACrB;AAAA,EACA,GAAG;AACL,GAAG;AACD,SAAO,mDAAC,SAAI,WAAW,GAAG,mDAAmD,SAAS,GAAI,GAAG,SAAtF;AAAA;AAAA;AAAA;AAAA,SAA6F;AACtG;AACA,KAAK;AAcU,SAAR,iBAAkC;AACvC,KAAG;AACH,QAAM,CAAC,MAAM,OAAO,IAAI,aAAAA,QAAM,SAAS,oBAAI,KAAK,CAAC;AACjD,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,YAAS,WAAW,gBAArB;AAAA;AAAA;AAAA;AAAA,SAAmC;AAC5C;AACA,GAAG,gBAAgB,gCAAgC,OAAO,WAAY;AACpE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,eAAe;AAChC,aAAa,KAAK,gBAAgB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React"]
}
